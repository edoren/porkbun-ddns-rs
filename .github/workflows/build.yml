name: "Build"

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  init:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{steps.version.outputs.version}}
      prerelease: ${{steps.state.outputs.prerelease}}
    steps:
      - name: Evaluate state
        id: state
        env:
          HEAD_REF: ${{github.head_ref}}
        run: |
          test -z "${HEAD_REF}" && (echo 'do-publish=true' >> $GITHUB_OUTPUT)
          if [[ "${{ github.event.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo release=true >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.ref }}" =~ ^refs/tags/v.*$ ]]; then
              echo prerelease=true >> $GITHUB_OUTPUT
          fi
      - name: Set version
        id: version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo "Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build:
    strategy:
      fail-fast: true
      matrix:
        rust:
          - stable
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc
          - aarch64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
            name: porkbun_ddns-x86_64-unknown-linux-gnu.tar.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04
            name: porkbun_ddns-aarch64-unknown-linux-gnu.tar.gz
            cross: "true"
            args: --features vendored # cross's container image is too old for us

          - target: x86_64-unknown-linux-musl
            os: ubuntu-24.04
            name: porkbun_ddns-x86_64-unknown-linux-musl.tar.gz
            install: |
              sudo apt install -y musl-tools
            args: --features vendored
          - target: aarch64-unknown-linux-musl
            os: ubuntu-24.04
            name: porkbun_ddns-aarch64-unknown-linux-musl.tar.gz
            cross: "true"
            args: --features vendored

          - target: x86_64-apple-darwin
            os: macos-13
            name: porkbun_ddns-x86_64-apple-darwin.tar.gz
          - target: aarch64-apple-darwin
            os: macos-14
            name: porkbun_ddns-aarch64-apple-darwin.tar.gz

          - target: x86_64-pc-windows-msvc
            os: windows-2022
            name: porkbun_ddns-x86_64-pc-windows-msvc.zip
            ext: ".exe"

          - target: aarch64-pc-windows-msvc
            os: windows-2022
            name: porkbun_ddns-aarch64-pc-windows-msvc.zip
            ext: ".exe"
            cross: "true"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Setup | Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup | Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        if: runner.os == 'Windows'
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
            core.exportVariable('VCPKG_BINARY_SOURCES', 'clear;x-gha,readwrite');

      - name: Setup | Install Dependencies
        if: matrix.install != ''
        run: ${{ matrix.install }}

      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}

      - name: Setup | B(inary)Install
        uses: cargo-bins/cargo-binstall@main

      - name: Setup | Cross
        if: matrix.cross == 'true'
        run: cargo binstall cross -y

      - name: Build | Build
        shell: bash
        run: |
          CMD="cargo"

          if [[ -n "${{ matrix.cross }}" ]]; then
            CMD="cross"
          fi

          OPTS="--release"
          OPTS="$OPTS ${{ matrix.args }}"

          if [[ -n "${{ matrix.target }}" ]]; then
            OPTS="$OPTS --target=${{ matrix.target }}"
          fi

          ${CMD} build ${OPTS}
